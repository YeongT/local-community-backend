openapi: 3.0.0
info:
  description: >
    This is api docs for local-community-service on implude project.
    If you want to know our service more, please visit HERE.
  version: 1.0.0
  title: Local-Community
  termsOfService: https://hakbong.me/terms/
  contact:
    email: contact@hakbong.me
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: user
    description: User Authentification API
  - name: post
    description: Community Article/Comment API
paths:
  /auth/signup:
    post:
      tags:
        - user
      summary: User Create
      description: api node for generating account
      operationId: createUser
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: email of account
                  type: string
                password:
                  description: password of account
                  type: string
                  format: password
                name:
                  description: nickname of account
                  type: string
                phone:
                  description: phone number of account (only number)
                  type: string
                gender:
                  description: gender of account
                  type: number
                  enum:
                    - 0
                    - 1
                    - 2
                areaString:
                  description: user area of account
                  type: string
              required:
                - email
                - password
                - name
                - phone
                - gender
                - areaString
      responses:
        "200":
          description: account generated and verification email sent.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "409":
          description: email client provided duplicated.
        "412":
          $ref: '#/components/responses/FormatError'
        "424":
          $ref: '#/components/responses/EmailFailed'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /auth/active:
    get:
      tags:
        - user
      summary: User Activation
      description: api node for activating account
      operationId: activeUser
      parameters:
        - name: email
          in: query
          description: The user email for verification
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: The token for verification
          required: true
          schema:
            type: string
            format: password
      responses:
        "200":
          description: account email verification finished.
        "409":
          description: account client provided not exist or already activated.
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /auth/login:
    post:
      tags:
        - user
      summary: User Login
      description: api node for getting jwt token
      operationId: loginUser
      security:
        - BasicAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: email of account
                  type: string
                password:
                  description: password of account
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        "200":
          description: user login succeed and json token generated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/apiTokenResult"
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "409":
          description: account client provided not exist
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /auth/jwtdecode:
    get:
      tags:
        - user
      summary: JWT TOKEN DECODE
      description: api node for decoding jwt token
      operationId: jwtdecode
      parameters:
        - name: token
          in: query
          description: The token for verification
          required: true
          schema:
            type: string
      responses:
        "200":
          description: jwt token decoded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/decodeTokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/decodeTokenResult"
        "500":
          description: jwt token decode failed
        default:
          $ref: '#/components/responses/DefaultModel'
  /post/new-article:
    put:
      tags:
        - post
      summary: Post New Article
      description: api node for posting new article
      operationId: newarticle
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                target:
                  description: community id for article
                  type: string
                title:
                  description: title of article
                  type: string
                text:
                  description: content of article
                  type: string
                tags:
                  description: tags of article
                  type: string
                picture:
                  description: pictures of article
                  type: string
                link:
                  description: links of article
                  type: string
              required:
                - target
                - title
                - text
                - tags
      responses:
        "200":
          description: article posted successfully.
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /post/new-comment:
    put:
      tags:
        - post
      summary: Post New Comment
      description: api node for posting new comment
      operationId: newcomment
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                target:
                  description: comment or article id for comment
                  type: string
                text:
                  description: content of comment
                  type: string
                picture:
                  description: pictures of comment
                  type: string
              required:
                - target
                - text
      responses:
        "200":
          description: comment posted successfully.
        "401":
          description: userjwt is invalid to post comment.
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  "/post/load-articles/{target}":
    get:
      tags:
        - post
      summary: Load Articles From Community
      description: api node for loading articles in community.
      operationId: loadarticles
      security:
        - JWTAuth: []
      parameters:
        - name: target
          in: path
          description: comment or article id for comment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: loading articles process finished.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/resArticles"
            application/xml:
              schema:
                $ref: "#/components/schemas/resArticles"
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  "/post/load-comments/{target}":
    get:
      tags:
        - post
      summary: Load Comments From Article or Comment
      description: api node for loading comments in comment or article.
      operationId: loadcomment
      security:
        - JWTAuth: []
      parameters:
        - name: target
          in: path
          description: comment or article id for comment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: loading comments process finished.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/resComments"
            application/xml:
              schema:
                $ref: "#/components/schemas/resComments"
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  "/post/load-editlogs/{objectType}/{target}":
    get:
      tags:
        - post
      summary: Load Edit History From Article or Comment
      description: api node for loading editlogs in comment or article.
      operationId: loadeditlog
      security:
        - JWTAuth: []
      parameters:
        - name: objectType
          in: path
          description: select object type which you want to query.
          required: true
          schema:
            type: string
            enum:
              - article
              - comment
        - name: target
          in: path
          description: comment or article id for loading history.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: loading comments process finished.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/resEditlogs"
            application/xml:
              schema:
                $ref: "#/components/schemas/resEditlogs"
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "409":
          description: article or comment object client provided doesn't exist.
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /post/mod-article:
    post:
      tags:
        - post
      summary: Edit Exist Article
      description: api node for editing article
      operationId: modarticle
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                target:
                  description: object id which you want to modify
                  type: string
                title:
                  description: title of article
                  type: string
                text:
                  description: content of article
                  type: string
                tags:
                  description: tags of article
                  type: string
                picture:
                  description: pictures of article
                  type: string
                link:
                  description: links of article
                  type: string
              required:
                - target
                - title
                - text
                - tags
      responses:
        "200":
          description: article edited successfully.
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "409":
          description: comment object client provided doesn't exist.
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
  /post/mod-comment:
    post:
      tags:
        - post
      summary: Edit Exist Comment
      description: api node for editing article
      operationId: modcomment
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                target:
                  description: object id which you want to modify
                  type: string
                text:
                  description: content of comment
                  type: string
                picture:
                  description: pictures of comment
                  type: string
              required:
                - target
                - text
      responses:
        "200":
          description: comment edited successfully.
        "403":
          $ref: '#/components/responses/NotAuthorized'
        "409":
          description: comment object client provided doesn't exist.
        "412":
          $ref: '#/components/responses/FormatError'
        "500":
          $ref: '#/components/responses/ServerError'
        default:
          $ref: '#/components/responses/DefaultModel'
externalDocs:
  description: Find out more about our team
  url: https://implude.com/teams/aidu
servers:
  - url: https://api.hakbong.me/
components:
  responses:
    NotAuthorized:
      description: >
        Request denied because you are not authorized.
        Please send correct authorization header.
    LoginDenied:
      description: user action denied because account closed.
    FormatError:
      description: data client provided doesn't satisfy format.
    EmailFailed:
      description: >
        account generated but verification email wasn't sent.
        Please resend verification email in application.
    ServerError:
      description: api server connection is unstable (cause of network status)
    DefaultModel:
      description: default response model
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/apiResult"
        application/xml:
          schema:
            $ref: "#/components/schemas/apiResult"
  securitySchemes:
    JWTAuth:
      type: apiKey
      name: authorization
      in: header
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    apiResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
        error:
          type: string
    apiTokenResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
        error:
          type: string
    decodeTokenResult:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
          properties:
            decode:
              type: object
              properties:
                enable:
                  type: boolean
                email:
                  type: string
                name:
                  type: string
                gender:
                  type: number
                phone:
                  type: string
                areaString:
                  type: string
                lastlogin:
                  type: string
                profileimg:
                  type: string
                iat:
                  type: number
                exp:
                  type: number
        error:
          type: string
    resArticles:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
          properties:
            count:
              type: number
            articles:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                      text:
                        type: string
                      tags:
                        type: array
                        items:
                          type: string
                      attach:
                        type: object
                        properties:
                          picture:
                            type: array
                            items:
                              type: string
                          link:
                            type: array
                            items:
                              type: string
                  owner:
                    type: string
                  modify:
                    type: object
                    properties:
                      ismodified:
                        type: boolean
                        default: false
        error:
          type: string
    resComments:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
          properties:
            count:
              type: number
            comments:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                  content:
                    type: object
                    properties:
                      text:
                        type: string
                      picture:
                        type: array
                        items:
                          type: string
                  owner:
                    type: string
                  modify:
                    type: object
                    properties:
                      ismodified:
                        type: boolean
                        default: false
        error:
          type: string
    resEditlogs:
      type: object
      properties:
        statusCode:
          type: number
        bodymsg:
          type: string
        output:
          type: object
          properties:
            count:
              type: number
            history:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                  content:
                    type: object
                    example: object
        error:
          type: string